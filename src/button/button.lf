target C {
    threading: false,
    build: "armgcc/build_nxp_unix.sh",
    platform: "FreeRTOS",
};

main reactor {

    preamble {=
        #include "../../../SDK_2_12_0_FRDM-K22F/devices/MK22F51212/fsl_device_registers.h"
        #include "../../../SDK_2_12_0_FRDM-K22F/devices/MK22F51212/utilities/debug_console_lite/fsl_debug_console.h"
        #include "../../../SDK_2_12_0_FRDM-K22F/devices/MK22F51212/drivers/fsl_common.h"
        #include "../../../SDK_2_12_0_FRDM-K22F/devices/MK22F51212/drivers/fsl_port.h"
        #include "../../../SDK_2_12_0_FRDM-K22F/devices/MK22F51212/drivers/fsl_gpio.h"
        #include "pin_mux.h"
        #include "clock_config.h"
        #include "board.h"
        #include "FreeRTOSConfig.h"
        
        #define APP_WAKEUP_BUTTON_GPIO        BOARD_SW2_GPIO
        #define APP_WAKEUP_BUTTON_PORT        BOARD_SW2_PORT
        #define APP_WAKEUP_BUTTON_GPIO_PIN    BOARD_SW2_GPIO_PIN
        #define APP_WAKEUP_BUTTON_IRQ         BOARD_SW2_IRQ
        #define APP_WAKEUP_BUTTON_IRQ_HANDLER BOARD_SW2_IRQ_HANDLER
        #define APP_WAKEUP_BUTTON_IRQ_TYPE    kPORT_InterruptFallingEdge

        void* button_press_action;
    
        /* The callback function that will execute in the context of the daemon task.
        Note callback functions must all use this same prototype. */
        void vProcessInterface( void *pvParameter1, uint32_t ulParameter2 )
        {

            /* ...Perform the processing here... */
            lf_schedule(pvParameter1, 0);

        }

        void APP_WAKEUP_BUTTON_IRQ_HANDLER(void) {

            BaseType_t xHigherPriorityTaskWoken;

            if ((1U << APP_WAKEUP_BUTTON_GPIO_PIN) & PORT_GetPinsInterruptFlags(APP_WAKEUP_BUTTON_PORT))
            {
                PORT_ClearPinsInterruptFlags(APP_WAKEUP_BUTTON_PORT, (1U << APP_WAKEUP_BUTTON_GPIO_PIN));
                PRINTF("push\r\n");

                /* The actual processing is to be deferred to a task. */
                xHigherPriorityTaskWoken = pdFALSE;
                xTimerPendFunctionCallFromISR(  vProcessInterface,
                                                button_press_action,
                                                0,
                                                &xHigherPriorityTaskWoken );

                /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context
                switch should be requested.  The macro used is port specific and will
                be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
                the documentation page for the port being used. */
                portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
            }
            /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
            exception return operation might vector to incorrect interrupt */
            __DSB();
        }
    =}

    state last_pressed: time(0);
    physical action pressed;
    logical action something;

    reaction(startup) -> pressed {=
        PRINTF("Starting...\r\n");

        
        NVIC_EnableIRQ(APP_WAKEUP_BUTTON_IRQ);
        PORT_SetPinInterruptConfig(APP_WAKEUP_BUTTON_PORT, APP_WAKEUP_BUTTON_GPIO_PIN, APP_WAKEUP_BUTTON_IRQ_TYPE);
        NVIC_SetPriority(APP_WAKEUP_BUTTON_IRQ, configLIBRARY_LOWEST_INTERRUPT_PRIORITY); //numerically higher than syscall interrupt

        button_press_action = pressed;
        PRINTF("Finished setup\r\n");
    =}

    reaction(pressed) -> something {=
        if (self->last_pressed == 0 || lf_time_logical() - self->last_pressed > MSEC(150)) {

            self->last_pressed = lf_time_physical();
            PRINTF("Button pushed at time %lld ns\r\n", self->last_pressed);

        }
        lf_schedule(something, SEC(1));
    =}

    reaction(something) {=
        PRINTF("Something at time %lld ns\r\n", lf_time_physical());
    =}
}
